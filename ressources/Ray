Fait avec :

	1) https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-generating-camera-rays
	2) How get the hight of the screen / viewport : https://classroom.udacity.com/courses/cs291/lessons/158750187/concepts/1694147830923
	3) Pour w : à partir de la 13ème minute : https://www.youtube.com/watch?v=LRN_ewuN_k4

	4) Visuelement pas mal : http://www.irisa.fr/prive/kadi/Master_Recherche/cours_CTR/RayTracing.pdf
--------------------------------------------------------------------------------

	Extrait du calcul de ray :

	basedir = mult1vec(cam->vecx, (double)SCREENSIZE);
	w = (double)SCREENSIZE * tan(RAD(cam->fov / 2)) * 2; // Here : https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-generating-camera-rays/generating-camera-rays
	pixshift = w / ((double)data->res.width - 1);
	ray = addvec(basedir, mult1vec(cam->vecz, ((2 * (y + 0.5) - data->res.width) / 2) * pixshift));
	ray = addvec(ray, mult1vec(cam->vecy, ((-2 * (x + 0.5) + data->res.height) / 2) * pixshift));
	ray = norm(ray);

	Exemple : résolution de 300 par 200

	BaseDir[x=199.000000;y=299.000000] --> (10.000000, 0.000000, 0.000000)
	RayV1[x=199.000000;y=299.000000] --> (10.000000, 0.000000, 7.002075)
	RayV2[x=199.000000;y=299.000000] --> (10.000000, -4.660244, 7.002075)
	w = 14.004151 et pixshift = 0.046837
	RayV3[x=199.000000;y=299.000000] --> (0.765286, -0.356642, 0.535859)

	BaseDir : on met l'axe x au proportion de l'ecran
	width : s'adapte en fonction du fov pour définir la largeur
	pixshift : largeur du fov divisé par nombre de pixels

	1er ADDVEC : définit ray.z, donc si le ray regarde à gauche ou à droite par rapport au milieu du viewport
	2ème ADDVEC : définit ray.y donc si le ray regarde à bas ou en haut ...

	On normalise pour avoir un pas de 1

	w et pixshift sont unique peu importe le x / y
	(d'ailleurs il faudrait les calculer une seule fois au début)
